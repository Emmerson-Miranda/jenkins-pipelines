node {
   def container
   def port
   stage('Preparation') {
      cleanWs()
      git 'https://github.com/Emmerson-Miranda/camel.git'
   }
   stage('Build') {
      // Run the maven build
      sh "cd helloworld-camel-spring-boot && mvn -Dmaven.test.failure.ignore clean package docker:build"
      // reading values from POM file
      def pom = readMavenPom file:'helloworld-camel-spring-boot/pom.xml'
      env.version = pom.version
      env.artifactId = pom.artifactId
   }
   stage ('Run') {
      //getting next port free
      port = getPort()
      //starting docker container
      container = docker.image("${env.artifactId}:${env.version}").run('-p ' + port + ':8080')
      //waiting until service is started
      timeout(3) {
      	waitUntil {
      		script {
      			def r = sh script: 'wget -q http://localhost:' + port + '/camel/say/hello/ -O /dev/null', returnStatus: true
                return (r == 0);
      		}
      	}
      }
   }
   stage ('Testing') {
      // running SOAPUI test
      sh "/home/mdgdev/SmartBear/SoapUI-5.3.0/bin/testrunner.sh -P PARAM_ADD_PORT=" + port + " -j -r helloworld-camel-spring-boot/src/test/resources/helloworld-camel-spring-boot-soapui-project.xml "
      junit 'TEST-TestSuite.xml'
   }
   stage ('Stop') {
      //stopping docker container
      container.stop()
   }
}

def getPort() {
    def port = 60000
    try {
        def serverSocket = new ServerSocket(0)
        port = serverSocket.getLocalPort()
        serverSocket.close()
    } catch (IOException ex) {
        System.err.println("no available ports")
    }
    return port
}
